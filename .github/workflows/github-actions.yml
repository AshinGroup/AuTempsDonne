name: Build Docker Container

on:
  push:
    branches:
      - release-test

jobs:
  build-backend:
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push Docker images
      uses: docker/build-push-action@v3.2.0
      with:
        context: ./api
        file: ./api/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/au-temps-donne:api-flask

  build-web:
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push Docker images
      uses: docker/build-push-action@v3.2.0
      with:
        context: ./web
        file: ./web/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/au-temps-donne:web


  deploy:
    needs: [build-backend, build-web]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Create .env file
      run: |
        echo "Generating .env file"

        echo "# Autogenerated .env file" > .env
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
        echo "DB_USER=${{ secrets.DB_USER }}" >> .env
        echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}" >> .env
        echo "API_PATH=${{ secrets.API_PATH }}" >> .env
        echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
        echo "FLASK_PORT=${{ secrets.FLASK_PORT }}" >> .env
        echo "REACT_PORT=${{ secrets.REACT_PORT }}" >> .env
        echo "GEOCODING_API_KEY=${{ secrets.GEOCODING_API_KEY }}" >> .env
        echo "OPRS_API_KEY=${{ secrets.OPRS_API_KEY }}" >> .env
        echo "GEOAPIFY_API_KEY=${{ secrets.GEOAPIFY_API_KEY }}" >> .env
        echo "WASABI_ENDPOINT=${{ secrets.WASABI_ENDPOINT }}" >> .env
        echo "WASABI_ACCESS_KEY=${{ secrets.WASABI_ACCESS_KEY }}" >> .env
        echo "WASABI_SECRET_KEY=${{ secrets.WASABI_SECRET_KEY }}" >> .env
        echo "WASABI_BUCKET_NAME=${{ secrets.WASABI_BUCKET_NAME }}" >> .env

    
    - name: copy files to target server via scp
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USERNAME }}
        port: 22
        password: ${{ secrets.DEPLOY_PASSWORD }}
        source: "docker-compose-prod.yaml,sql,.env"
        target: "~/home/atd/"


    - name: remote docker-compose up via ssh
      uses: appleboy/ssh-action@v0.1.5
      env:
        APPTOKEN: ${{ secrets.GITHUB_TOKEN }}
        USERNAME: ${{ secrets.DEPLOY_USERNAME }}
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USERNAME }}
        password: ${{ secrets.DEPLOY_PASSWORD }}
        port: 22
        envs: APPTOKEN,USERNAME
        script: |
          cd ~/home/atd
          pwd
          docker compose -f docker-compose-prod.yml up --build 



        